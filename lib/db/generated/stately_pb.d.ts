// @generated by Stately. DO NOT EDIT.
/* eslint-disable */

import type {
  GenEnum,
  GenFile,
  GenMessage,
  ProtobufESMessage,
} from "@stately-cloud/client";

export declare const file_stately: GenFile;

/**
 * Chat represents a conversation thread
 * 
 * These items can be accessed via the following key paths:
 *   * /chat-:id
 *   * /user-:userId/chat-:id
 *   * /user-:userId/visibility-:visibility/chat-:id (optional)
 */
export declare type Chat = ProtobufESMessage<"stately.generated.Chat"> & {
  id: bigint;
  title: string;
  userId: bigint;
  visibility: Visibility;
  lastContext?: AppUsage;
  createdAt: bigint;
  updatedAt: bigint;
};

/**
 * Describes the message stately.generated.Chat.
 * Use `create(ChatSchema)` to create a new message.
 */
export declare const ChatSchema: GenMessage<Chat>;

/**
 * Document represents user-created content
 * Note: We use a separate createdTimestamp field for versioning of one document
 * because metadata fields cannot be used in key paths
 * 
 * These items can be accessed via the following key paths:
 *   * /document-:id/version-:createdAt
 *   * /user-:userId/document-:id/version-:createdAt
 */
export declare type Document = ProtobufESMessage<"stately.generated.Document"> & {
  id: bigint;
  userId: bigint;
  title: string;
  content: string;
  kind: DocumentKind;
  createdAt: bigint;
  updatedAt: bigint;
};

/**
 * Describes the message stately.generated.Document.
 * Use `create(DocumentSchema)` to create a new message.
 */
export declare const DocumentSchema: GenMessage<Document>;

/**
 * Message represents a single message in a chat conversation
 * 
 * These items can be accessed via the following key paths:
 *   * /chat-:chatId/message-:id
 */
export declare type Message = ProtobufESMessage<"stately.generated.Message"> & {
  id: bigint;
  chatId: bigint;
  role: MessageRole;
  parts: MessagePart[];
  attachments: MessageAttachment[];
  createdAt: bigint;
  createdAtVersion: bigint;
};

/**
 * Describes the message stately.generated.Message.
 * Use `create(MessageSchema)` to create a new message.
 */
export declare const MessageSchema: GenMessage<Message>;

/**
 * Stream represents real-time streaming sessions for chats
 * 
 * These items can be accessed via the following key paths:
 *   * /chat-:chatId/stream-:id
 *   * /stream-:id
 */
export declare type Stream = ProtobufESMessage<"stately.generated.Stream"> & {
  id: bigint;
  chatId: bigint;
  active: boolean;
  createdAt: bigint;
  lastActivity: bigint;
};

/**
 * Describes the message stately.generated.Stream.
 * Use `create(StreamSchema)` to create a new message.
 */
export declare const StreamSchema: GenMessage<Stream>;

/**
 * Suggestion represents feedback or suggestions on documents
 * 
 * These items can be accessed via the following key paths:
 *   * /document-:documentId/version-:documentVersion/suggestion-:id
 *   * /user-:userId/suggestion-:id
 */
export declare type Suggestion = ProtobufESMessage<"stately.generated.Suggestion"> & {
  id: bigint;
  documentId: bigint;
  documentVersion: bigint;
  originalText: string;
  suggestedText: string;
  description: string;
  resolutionStatus: ResolutionStatus;
  userId: bigint;
  resolvedAt: bigint;
};

/**
 * Describes the message stately.generated.Suggestion.
 * Use `create(SuggestionSchema)` to create a new message.
 */
export declare const SuggestionSchema: GenMessage<Suggestion>;

/**
 * User represents an authenticated user of the system
 * 
 * These items can be accessed via the following key paths:
 *   * /user-:id
 *   * /email-:email
 */
export declare type User = ProtobufESMessage<"stately.generated.User"> & {
  id: bigint;
  email: string;
  passwordHash: string;
  createdAt: bigint;
  lastModifiedAt: bigint;
};

/**
 * Describes the message stately.generated.User.
 * Use `create(UserSchema)` to create a new message.
 */
export declare const UserSchema: GenMessage<User>;

/**
 * Vote represents user feedback on messages
 * 
 * These items can be accessed via the following key paths:
 *   * /chat-:chatId/message-:messageId/vote
 *   * /message-:messageId/vote-:chatId
 */
export declare type Vote = ProtobufESMessage<"stately.generated.Vote"> & {
  chatId: bigint;
  messageId: bigint;
  isUpvoted: boolean;
  votedAt: bigint;
};

/**
 * Describes the message stately.generated.Vote.
 * Use `create(VoteSchema)` to create a new message.
 */
export declare const VoteSchema: GenMessage<Vote>;
/**
 * App usage context for chat sessions
 */
export declare type AppUsage = ProtobufESMessage<"stately.generated.AppUsage"> & {
  app: string;
  version: string;
  features: string[];
  metadata: string;
};

/**
 * Describes the message stately.generated.AppUsage.
 * Use `create(AppUsageSchema)` to create a new message.
 */
export declare const AppUsageSchema: GenMessage<AppUsage>;
/**
 * Message attachment structure
 */
export declare type MessageAttachment = ProtobufESMessage<"stately.generated.MessageAttachment"> & {
  name: string;
  mimeType: string;
  size: bigint;
  url: string;
  data: Uint8Array;
};

/**
 * Describes the message stately.generated.MessageAttachment.
 * Use `create(MessageAttachmentSchema)` to create a new message.
 */
export declare const MessageAttachmentSchema: GenMessage<MessageAttachment>;
/**
 * Message part structure for rich message content
 */
export declare type MessagePart = ProtobufESMessage<"stately.generated.MessagePart"> & {
  type: string;
  content: string;
  mimeType: string;
  data: Uint8Array;
};

/**
 * Describes the message stately.generated.MessagePart.
 * Use `create(MessagePartSchema)` to create a new message.
 */
export declare const MessagePartSchema: GenMessage<MessagePart>;


/**
 * Document types
 */
export enum DocumentKind {
  DocumentKind_TEXT = 0,
  DocumentKind_CODE = 1,
  DocumentKind_IMAGE = 2,
  DocumentKind_SHEET = 3,
}

/**
 * Describes the enum stately.generated.DocumentKind.
 */
export declare const DocumentKindSchema: GenEnum<DocumentKind>;


/**
 * Message roles for chat participants
 */
export enum MessageRole {
  MessageRole_UNSPECIFIED = 0,
  MessageRole_USER = 1,
  MessageRole_ASSISTANT = 2,
  MessageRole_SYSTEM = 3,
}

/**
 * Describes the enum stately.generated.MessageRole.
 */
export declare const MessageRoleSchema: GenEnum<MessageRole>;


/**
 * Resolution status for suggestions
 */
export enum ResolutionStatus {
  ResolutionStatus_PENDING = 0,
  ResolutionStatus_RESOLVED = 1,
  ResolutionStatus_REJECTED = 2,
}

/**
 * Describes the enum stately.generated.ResolutionStatus.
 */
export declare const ResolutionStatusSchema: GenEnum<ResolutionStatus>;


/**
 * Visibility levels for chat conversations
 */
export enum Visibility {
  Visibility_PRIVATE = 0,
  Visibility_PUBLIC = 1,
}

/**
 * Describes the enum stately.generated.Visibility.
 */
export declare const VisibilitySchema: GenEnum<Visibility>;